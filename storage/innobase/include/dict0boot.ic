/*****************************************************************************

Copyright (c) 1996, 2023, Oracle and/or its affiliates.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License, version 2.0,
as published by the Free Software Foundation.

This program is also distributed with certain software (including
but not limited to OpenSSL) that is licensed under separate terms,
as designated in a particular file or component or in included license
documentation.  The authors of MySQL hereby grant you an additional
permission to link the program and your derivative works with the
separately licensed software that they have included with MySQL.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License, version 2.0, for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Suite 500, Boston, MA 02110-1335 USA

*****************************************************************************/

/**************************************************//**
@file include/dict0boot.ic
Data dictionary creation and booting

Created 4/18/1996 Heikki Tuuri
*******************************************************/

/**********************************************************************//**
Returns a new row id.
@return the new id */
UNIV_INLINE
row_id_t
dict_sys_get_new_row_id(void)
/*=========================*/
{
	row_id_t	id;

	mutex_enter(&dict_sys->mutex);

        // 从系统字典中获取当然row_id的值
	id = dict_sys->row_id;

        // 在系统运行过程中，可能会不断地获取并自增row_id，当增加到256的倍数时，就记录一下到磁盘
        // 正常来说应该是每次加1就要存到磁盘，但是这样太消耗性能了，所以是每256次才存一次磁盘
        // 假如在还没有达到256次的时候MySQL重启了，会拿当前磁盘中村的ROW_ID加上DICT_HDR_ROW_ID_WRITE_MARGIN，相当于跳过一个步长
	if (0 == (id % DICT_HDR_ROW_ID_WRITE_MARGIN)) {

		dict_hdr_flush_row_id();
	}

        // 自增
	dict_sys->row_id++;

	mutex_exit(&dict_sys->mutex);

        // 返回自增前的id
	return(id);
}

/**********************************************************************//**
Reads a row id from a record or other 6-byte stored form.
@return row id */
UNIV_INLINE
row_id_t
dict_sys_read_row_id(
/*=================*/
	const byte*	field)	/*!< in: record field */
{
#if DATA_ROW_ID_LEN != 6
# error "DATA_ROW_ID_LEN != 6"
#endif

	return(mach_read_from_6(field));
}

/**********************************************************************//**
Writes a row id to a record or other 6-byte stored form. */
UNIV_INLINE
void
dict_sys_write_row_id(
/*==================*/
	byte*		field,	/*!< in: record field */
	row_id_t	row_id)	/*!< in: row id */
{
#if DATA_ROW_ID_LEN != 6
# error "DATA_ROW_ID_LEN != 6"
#endif

	mach_write_to_6(field, row_id);
}

/*********************************************************************//**
Check if a table id belongs to  system table.
@return true if the table id belongs to a system table. */
UNIV_INLINE
bool
dict_is_sys_table(
/*==============*/
	table_id_t	id)		/*!< in: table id to check */
{
	return(id < DICT_HDR_FIRST_ID);
}


